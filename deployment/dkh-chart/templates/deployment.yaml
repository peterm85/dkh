apiVersion: apps/v1
kind: Deployment
metadata:
  name: dkhservice1-dpl
spec:
  replicas: {{ .Values.dkhservice1.replicaCount }}
  selector:
    matchLabels:
      app-name: dkhservice1
  
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.dkhservice1.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.dkhservice1.rollingUpdate.maxSurge }}
  
  template:
    metadata:
      name: dkhservice1-pod
      labels:
        type: back-end
        app-name: dkhservice1
        language: java
    spec:
      containers:
      - name: dkhservice1
        image: {{ .Values.dkhservice1.image }}
        #imagePullPolicy: Always
        ports:
        - name: default-port
          containerPort: {{ .Values.dkhservice1.ports.containerPort }}
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name 
        envFrom:
        - configMapRef:
            name: dkhservice1-config
        
        readinessProbe:
          httpGet:
            path: /live/healthy
            port: default-port
          initialDelaySeconds: {{ .Values.dkhservice1.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.dkhservice1.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.dkhservice1.readinessProbe.failureThreshold }}
        livenessProbe:
          httpGet:
            path: /live/healthy
            port: default-port
          initialDelaySeconds: {{ .Values.dkhservice1.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.dkhservice1.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.dkhservice1.livenessProbe.failureThreshold }}
        resources:
          requests:
            cpu: .1
            memory: "256Mi"
          limits:
            cpu: .2
            memory: "500Mi"  

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: dkhservice2-dpl
spec:
  replicas: {{ .Values.dkhservice2.replicaCount }}
  selector:
    matchLabels:
      app-name: dkhservice2
  
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.dkhservice2.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.dkhservice2.rollingUpdate.maxSurge }}
  
  template:
    metadata:
      name: dkhservice2-pod
      labels:
        type: back-end
        app-name: dkhservice2
        language: java
    spec:
      containers:
      - name: dkhservice2
        image: {{ .Values.dkhservice2.image }}
        #imagePullPolicy: Always
        ports:
        - name: default-port
          containerPort: {{ .Values.dkhservice2.ports.containerPort }}
        envFrom:
        - secretRef:
            name: mysql-sec
        readinessProbe:
          httpGet:
            path: /live/healthy
            port: default-port
          initialDelaySeconds: {{ .Values.dkhservice2.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.dkhservice2.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.dkhservice2.readinessProbe.failureThreshold }}
        livenessProbe:
          httpGet:
            path: /live/healthy
            port: default-port
          initialDelaySeconds: {{ .Values.dkhservice2.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.dkhservice2.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.dkhservice2.livenessProbe.failureThreshold }}
        resources:
          requests:
            cpu: .2
            memory: "500Mi"
          limits:
            cpu: .4
            memory: "500Mi"
